import ccxt
import pandas as pd
import ta
import time
import logging
import sys
import os
import requests
import csv
import threading

# Telegram Bilgileri
BOT_TOKEN = '5485088176:AAFyqxFDkTgi04zPTcxNaoLj89RtCFGPgY4'
CHAT_ID = '-1001687146213'

# Windows terminalde UTF-8 desteğini aktif et
if os.name == "nt":
    sys.stdout.reconfigure(encoding='utf-8')
    sys.stderr.reconfigure(encoding='utf-8')

# Log dosyasına yazma ayarı
logging.basicConfig(filename="trade_log.txt", level=logging.INFO,
                    format="%(asctime)s - %(message)s", encoding="utf-8")

print("Program başlatıldı, hata tespit ediliyor...")

# Binance API Bağlantısı (Futures Modu)
try:
    binance = ccxt.binance({
        'apiKey': 'OzHexBKtuolWhjplCKDr32IPUOfiq9kPyBG1vo6kop7oNqbkjHCsu70HzeCLcLZ7',
        'secret': 'EGhxMrGdlqtaXw5ZJzHlA6gp1bXNEHkKQnJ1DI0gx8upjtlJT3FnuxtajDdGXCPh',
        'options': {'defaultType': 'future'},
        'rateLimit': 1200
    })
    print("Binance API Bağlantısı Kuruldu.")
except Exception as e:
    print(f"Binance API Bağlantı Hatası: {e}")
    sys.exit()

TIMEFRAME = "5m"          # 5 dakika zaman dilimi

# Kullanıcıdan işlem parametrelerini alma
try:
    USD_AMOUNT = float(input("İşlem için kullanılacak USD miktarını giriniz (örn: 10): "))
    STOP_LOSS_PERCENT = float(input("Stop Loss yüzdesini giriniz (ondalık, örn: 0.02 = %2): "))
    TAKE_PROFIT_PERCENT = float(input("Take Profit yüzdesini giriniz (ondalık, örn: 0.015 = %1.5): "))
    LEVERAGE = float(input("Kullanılacak kaldıraç oranını giriniz (örn: 20): "))
except Exception as e:
    print("Girdi hatası, lütfen sayısal değerler giriniz.")
    sys.exit()

# Kullanıcıdan işlem yapılacak kripto para çiftlerini alma (virgülle ayrılmış)
try:
    pairs_input = input("İşlem yapılacak kripto para çiftlerini giriniz (örn: BTCUSDT,ETHUSDT): ")
    PAIR_LIST = [pair.strip().upper() for pair in pairs_input.split(",")]
except Exception as e:
    print("Girdi hatası, lütfen geçerli kripto çiftleri giriniz.")
    sys.exit()

# CSV'ye işlem loglarını yazmak için fonksiyon
def log_trade(event_type, side, price, quantity, remarks=""):
    timestamp = pd.Timestamp.now().strftime("%Y-%m-%d %H:%M:%S")
    row = {
        "timestamp": timestamp,
        "event_type": event_type,
        "side": side,
        "price": price,
        "quantity": quantity,
        "remarks": remarks
    }
    file_exists = os.path.isfile("trades.csv")
    with open("trades.csv", "a", newline="") as csvfile:
        fieldnames = ["timestamp", "event_type", "side", "price", "quantity", "remarks"]
        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
        if not file_exists or os.stat("trades.csv").st_size == 0:
            writer.writeheader()
        writer.writerow(row)
    debug_log(f"İşlem kaydedildi: {row}")

# Telegram'a Mesaj Gönderme Fonksiyonu
def send_telegram_message(message):
    try:
        url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
        params = {'chat_id': CHAT_ID, 'text': message}
        response = requests.get(url, params=params, timeout=10)
        debug_log(f"Telegram yanıt kodu: {response.status_code}")
        debug_log(f"Telegram yanıt metni: {response.text}")
    except Exception as e:
        print(f"Telegram mesaj gönderim hatası: {e}")
        logging.error(f"Telegram mesaj gönderim hatası: {e}")

# Hata Ayıklama İçin Anlık Log Yazdır
def debug_log(message):
    print(message)
    logging.info(message)

# Piyasa Verilerini Çekme
def fetch_market_data(pair, timeframe):
    try:
        debug_log(f"{pair} için piyasa verisi çekiliyor...")
        bars = binance.fetch_ohlcv(pair, timeframe, limit=100)
        df = pd.DataFrame(bars, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
        return df
    except Exception as e:
        logging.error(f"fetch_market_data Hatası: {e}")
        debug_log(f"fetch_market_data Hatası: {e}")
        return None

# Teknik Analiz Sinyalleri Hesaplama
def calculate_indicators(df):
    try:
        df['rsi'] = ta.momentum.RSIIndicator(df['close'], window=7).rsi()
        bb = ta.volatility.BollingerBands(df['close'], window=10, window_dev=2)
        df['bb_upper'] = bb.bollinger_hband()
        df['bb_lower'] = bb.bollinger_lband()
        macd_indicator = ta.trend.MACD(df['close'], window_fast=12, window_slow=26, window_sign=9)
        df['macd'] = macd_indicator.macd()
        df['macd_signal'] = macd_indicator.macd_signal()
        df['rsi_ma'] = df['rsi'].rolling(window=3).mean()
        return df
    except Exception as e:
        logging.error(f"calculate_indicators Hatası: {e}")
        debug_log(f"calculate_indicators Hatası: {e}")
        return None

# Açık Pozisyonları Getirme
def fetch_open_positions(pair):
    try:
        positions = binance.fetch_positions()
        debug_log(f"{pair} için açık pozisyonlar: {positions}")
        return [p for p in positions if p.get('info', {}).get('symbol', '').strip() == pair]
    except Exception as e:
        logging.error(f"fetch_open_positions Hatası: {e}")
        debug_log(f"fetch_open_positions Hatası: {e}")
        return None

# Açık Stop Loss / Take Profit Emirlerini İptal Etme Fonksiyonu
def cancel_sl_tp_orders(pair):
    try:
        orders = binance.fetch_open_orders(pair)
        for order in orders:
            order_type = order.get('type', '').upper()
            if order_type in ['STOP_MARKET', 'TAKE_PROFIT_MARKET']:
                binance.cancel_order(order['id'], pair)
                debug_log(f"Cancelled order {order['id']} (Type: {order_type}) for {pair}")
    except Exception as e:
        debug_log(f"cancel_sl_tp_orders error: {e}")

# Yeni işlem miktarını USD cinsinden aldıktan sonra BTC miktarına çevirme (Leverage dahil)
def calculate_order_amount(last_close):
    try:
        # İşlem miktarı = (USD_AMOUNT * LEVERAGE) / last_close
        return (USD_AMOUNT * LEVERAGE) / last_close
    except Exception as e:
        debug_log(f"calculate_order_amount error: {e}")
        return None

# Stop-Loss ve Take-Profit Emirlerini Ayarla (Önceki emirleri iptal ederek)
def set_stop_loss_take_profit(pair, order_type, entry_price, amount):
    """
    amount = BTC cinsinden miktar.
    entry_price = pozisyon açılış fiyatı (USDT cinsinden).
    """
    try:
        cancel_sl_tp_orders(pair)
        if order_type == "BUY":
            stop_loss_price = entry_price * (1 - STOP_LOSS_PERCENT)
            take_profit_price = entry_price * (1 + TAKE_PROFIT_PERCENT)
            side_for_sl_tp = "SELL"
        else:
            stop_loss_price = entry_price * (1 + STOP_LOSS_PERCENT)
            take_profit_price = entry_price * (1 - TAKE_PROFIT_PERCENT)
            side_for_sl_tp = "BUY"

        debug_log(f"{pair} için SL: {stop_loss_price}, TP: {take_profit_price}")

        binance.create_order(
            symbol=pair,
            type="STOP_MARKET",
            side=side_for_sl_tp,
            amount=amount,
            params={"stopPrice": stop_loss_price, "positionSide": "BOTH"}
        )

        binance.create_order(
            symbol=pair,
            type="TAKE_PROFIT_MARKET",
            side=side_for_sl_tp,
            amount=amount,
            params={"stopPrice": take_profit_price, "positionSide": "BOTH"}
        )

        debug_log(f"{pair} için SL & TP emirleri gönderildi. SL: {stop_loss_price}, TP: {take_profit_price}")

        msg = (
            f"───────── 💹 YENİ POZİSYON 💹 ─────────\n\n"
            f"**Pozisyon Türü**: {order_type}\n"
            f"**Kripto:** {pair}\n"
            f"**Giriş Fiyatı**: {entry_price}\n"
            f"**Stop Loss**: {stop_loss_price}\n"
            f"**Take Profit**: {take_profit_price}\n"
            f"**Miktar**: {amount} BTC\n"
            f"───────────📣───────────"
        )
        send_telegram_message(msg)
        log_trade("ENTRY", order_type, entry_price, amount, "Yeni pozisyon açıldı")
    except Exception as e:
        logging.error(f"set_stop_loss_take_profit Hatası: {e}")
        debug_log(f"set_stop_loss_take_profit Hatası: {e}")

# Ana Bot Döngüsü: Her bir kripto para çifti için çalışacak şekilde düzenlendi.
def trade_bot(pair):
    debug_log(f"{pair} için Trade Bot Başlatıldı!")
    send_telegram_message(
        f"───────── 🤖 BOT BAŞLATILDI 🤖 ─────────\n\n"
        f"{pair} için Trade Bot aktif hale geldi ve piyasayı izlemeye başladı.\n"
        f"Her 5 dakikalık mum kapanışında MACD ve RSI sinyallerine göre işlem üretecek.\n\n"
        "Bol Şanslar!"
    )

    # Bot başlatıldığında pozisyon bilgisini almak için 10 saniye bekle
    time.sleep(10)
    positions = fetch_open_positions(pair)
    open_position_found = False
    if positions:
        for pos in positions:
            info_symbol = pos.get('info', {}).get('symbol', '').strip()
            position_amt = float(pos.get('info', {}).get('positionAmt', 0))
            debug_log(f"{pair} için kontrol edilen sembol (info): {info_symbol} | positionAmt: {position_amt}")
            if info_symbol == pair and abs(position_amt) > 0:
                open_position_found = True
                position_side = "LONG" if position_amt > 0 else "SHORT"
                entry_price = pos.get('info', {}).get('entryPrice', 'Bilinmiyor')
                stop_loss = pos.get('info', {}).get('stopLossPrice')
                take_profit = pos.get('info', {}).get('takeProfitPrice')
                if not stop_loss:
                    stop_loss = "Belirtilmemiş"
                if not take_profit:
                    take_profit = "Belirtilmemiş"
                msg = (
                    f"───────── 🔔 AÇIK POZİSYON BİLGİSİ 🔔 ─────────\n\n"
                    f"**Kripto:** {pair}\n"
                    f"**Pozisyon Türü**: {position_side}\n"
                    f"**Giriş Fiyatı**: {entry_price}\n"
                    f"**Miktar**: {position_amt} BTC\n"
                    f"**Stop Loss**: {stop_loss}\n"
                    f"**Take Profit**: {take_profit}\n"
                    f"───────────────"
                )
                send_telegram_message(msg)
                break

    if not open_position_found:
        send_telegram_message("❗️ Açık pozisyon bulunmamaktadır.")

    last_closed_candle_ts = None

    while True:
        try:
            df = fetch_market_data(pair, TIMEFRAME)
            if df is None:
                debug_log(f"{pair} için piyasa verisi çekilemedi, tekrar denenecek.")
                time.sleep(60)
                continue

            df = calculate_indicators(df)
            if df is None:
                debug_log(f"{pair} için indikatör hesaplanamadı, tekrar denenecek.")
                time.sleep(60)
                continue

            new_closed_candle_ts = df['timestamp'].iloc[-2]
            if new_closed_candle_ts != last_closed_candle_ts:
                debug_log(f"{pair} için yeni bir 5 dakikalık mum kapandı, sinyaller kontrol ediliyor...")
                last_closed_candle_ts = new_closed_candle_ts

                # İndikatör değerlerini al
                prev_macd = df['macd'].iloc[-3]
                prev_macd_signal = df['macd_signal'].iloc[-3]
                current_macd = df['macd'].iloc[-2]
                current_macd_signal = df['macd_signal'].iloc[-2]
                prev_rsi = df['rsi'].iloc[-3]
                current_rsi = df['rsi'].iloc[-2]
                current_rsi_ma = df['rsi_ma'].iloc[-2]
                last_close = df['close'].iloc[-2]

                debug_log(f"{pair} için Prev MACD: {prev_macd}, Prev MACD Signal: {prev_macd_signal}")
                debug_log(f"{pair} için Current MACD: {current_macd}, Current MACD Signal: {current_macd_signal}")
                debug_log(f"{pair} için Prev RSI: {prev_rsi}, Current RSI: {current_rsi}, RSI MA: {current_rsi_ma}")
                debug_log(f"{pair} için Kapanan Mumun Close: {last_close}")

                positions = fetch_open_positions(pair)
                found_open_position = False

                # Mevcut pozisyon varsa reversal kontrolü yap
                if positions:
                    for pos in positions:
                        info_symbol = pos.get('info', {}).get('symbol', '').strip()
                        position_amt = float(pos.get('info', {}).get('positionAmt', 0))
                        debug_log(f"{pair} için kontrol edilen sembol (info): {info_symbol} | positionAmt: {position_amt}")
                        if info_symbol == pair and abs(position_amt) > 0:
                            found_open_position = True
                            current_side = "BUY" if position_amt > 0 else "SELL"
                            if current_side == "BUY" and (prev_macd > prev_macd_signal and current_macd < current_macd_signal and current_rsi < current_rsi_ma):
                                debug_log(f"{pair} için açık LONG pozisyon tersine çevriliyor (reversal sinyali).")
                                cancel_sl_tp_orders(pair)
                                binance.create_market_order(pair, "SELL", abs(position_amt))
                                debug_log(f"{pair} için LONG pozisyon kapatıldı.")
                                send_telegram_message("✔️ LONG pozisyonu kapatıldı, SHORT sinyali verildi.")
                                log_trade("EXIT", "SELL", last_close, abs(position_amt), "LONG pozisyon kapatıldı")
                                order = binance.create_market_order(pair, "SELL", calculate_order_amount(last_close))
                                debug_log(f"{pair} için SHORT işlemi açıldı: {order}")
                                log_trade("ENTRY", "SELL", last_close, calculate_order_amount(last_close), "Yeni SHORT pozisyon açıldı")
                                set_stop_loss_take_profit(pair, "SELL", last_close, calculate_order_amount(last_close))
                            elif current_side == "SELL" and (prev_macd < prev_macd_signal and current_macd > current_macd_signal and current_rsi > current_rsi_ma):
                                debug_log(f"{pair} için açık SHORT pozisyon tersine çevriliyor (reversal sinyali).")
                                cancel_sl_tp_orders(pair)
                                binance.create_market_order(pair, "BUY", abs(position_amt))
                                debug_log(f"{pair} için SHORT pozisyon kapatıldı.")
                                send_telegram_message("✔️ SHORT pozisyonu kapatıldı, LONG sinyali verildi.")
                                log_trade("EXIT", "BUY", last_close, abs(position_amt), "SHORT pozisyon kapatıldı")
                                order = binance.create_market_order(pair, "BUY", calculate_order_amount(last_close))
                                debug_log(f"{pair} için LONG işlemi açıldı: {order}")
                                log_trade("ENTRY", "BUY", last_close, calculate_order_amount(last_close), "Yeni LONG pozisyon açıldı")
                                set_stop_loss_take_profit(pair, "BUY", last_close, calculate_order_amount(last_close))
                if not found_open_position:
                    order_amount = calculate_order_amount(last_close)
                    if (prev_macd < prev_macd_signal and current_macd > current_macd_signal and current_rsi > current_rsi_ma):
                        debug_log(f"{pair} için MACD sinyali yukarı kesildi ve RSI > RSI MA, LONG açılıyor.")
                        order = binance.create_market_order(pair, "BUY", order_amount)
                        debug_log(f"{pair} için LONG işlemi açıldı: {order}")
                        log_trade("ENTRY", "BUY", last_close, order_amount, "Yeni LONG pozisyon açıldı")
                        set_stop_loss_take_profit(pair, "BUY", last_close, order_amount)
                    elif (prev_macd > prev_macd_signal and current_macd < current_macd_signal and current_rsi < current_rsi_ma):
                        debug_log(f"{pair} için MACD sinyali aşağı kesildi ve RSI < RSI MA, SHORT açılıyor.")
                        order = binance.create_market_order(pair, "SELL", order_amount)
                        debug_log(f"{pair} için SHORT işlemi açıldı: {order}")
                        log_trade("ENTRY", "SELL", last_close, order_amount, "Yeni SHORT pozisyon açıldı")
                        set_stop_loss_take_profit(pair, "SELL", last_close, order_amount)

            debug_log("5 saniye bekleniyor...")
            time.sleep(5)

        except Exception as e:
            logging.error(f"{pair} için trade_bot Hatası: {e}")
            debug_log(f"{pair} için trade_bot Hatası: {e}")
            time.sleep(60)

# Main: Her bir kripto para çifti için ayrı thread başlatılıyor
def main():
    threads = []
    for pair in PAIR_LIST:
        t = threading.Thread(target=trade_bot, args=(pair,))
        t.start()
        threads.append(t)
    for t in threads:
        t.join()

try:
    main()
except Exception as e:
    debug_log(f"Beklenmeyen Hata: {e}")
    input("Devam etmek için ENTER tuşuna basın...")
